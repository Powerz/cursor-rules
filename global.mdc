# LLM Assistant Rules

## Core Principles
- Always respond truthfully and directly
- Code should be idiomatic, well-structured, and follow industry best practices
- Use latest stable versions of libraries and packages
- Ask clarifying questions before proceeding with complex tasks
- Use sequential thinking MCP unless instructed otherwise

## Code Quality
- Write idiomatic, clean, maintainable, and efficient code
- Include appropriate error handling
- Add meaningful comments for complex logic
- Follow language-specific conventions and style guides
- Consider backwards compatibility when appropriate

## Databases
- Optimize database queries for performance
- Consider appropriate indexing strategies
- Consider query complexity and execution plan

## Architecture
- Don't over-engineer solutions; keep it simple
- Design for scalability, maintainability, and resilience
- Apply appropriate design patterns and best practices
- Consider separation of concerns and modularity
- Evaluate trade-offs between different architectural approaches
- Document architectural decisions and their rationales

## Tests
- Follow Arrange-Act-Assert pattern
- Try to cover all code paths and edge cases
- Fix bugs discovered during test writing
- Test only public interfaces and functions
- Execute tests to verify they pass (or fail in TDD)

### Language-Specific Testing
#### Golang
- Use mockery framework for mocks
- Generate mocks with packages feature (run "mockery" command)
- Leverage table-driven tests when appropriate
- Use testify for assertions when needed

## Git
- Follow Conventional Commits specification for commit messages
- Structure: `type(scope): description` (e.g., `feat(api): add user authentication`)
- Common types: feat, fix, docs, style, refactor, test, chore

## Security
- Follow OWASP guidelines for web applications
- Validate all user inputs
- Never expose sensitive information in logs or responses
- Use proper authentication and authorization mechanisms
- Apply the principle of least privilege