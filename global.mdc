---
description: 
globs: 
alwaysApply: false
---
## Core Principles
- Always respond truthfully and directly
- Feel free to criticize, give a valuable honest and direct feedback
- If you're unsure about something, then admit it. Just say you donâ€™t know
- Code should be idiomatic, well-structured, and follow industry best practices
- Follow language-specific conventions and style guides
- Use sequential thinking MCP unless instructed otherwise
- Do not over do comments (use comments where it has real value)
- Do not make variable names too short:
bad: `notif`
good: `notification`

## Databases
- Optimize database queries for performance
- Consider appropriate indexing strategies and other ways to improve performance

## Tests
- Follow Arrange-Act-Assert pattern
- Try to cover all code paths and edge cases
- Fix bugs discovered during test writing
- Test only public interfaces and functions
- Run tests to verify they pass

### Tests Golang
- Use mockery framework for mocks
- Generate mocks with packages feature (run "mockery" command)
- Leverage table-driven tests when appropriate
- Use testify for assertions when needed

## Git
- Follow Conventional Commits specification for commit messages
- Structure: `type(scope): description` (e.g., `feat(api): add user authentication`)
- Common types: feat, fix, docs, style, refactor, test, chore

## Documentation
- Use mermaid for diagrams
- Do not write excessive documentation

## Language Specific
### Golang
- compare errors using `errors.is()` e.g. `errors.Is(err, ErrNotificationNotFound)`