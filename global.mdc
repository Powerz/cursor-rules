## Core Principles
- Always respond truthfully and directly
- Feel free to criticise by giving a valuable honest feedback
- Code should be idiomatic, well-structured, and follow industry best practices
- Follow language-specific conventions and style guides
- Use latest stable versions of libraries and packages (double check on Web)
- Use sequential thinking MCP unless instructed otherwise
- Do not over do comments (use comments when it has real value)
- Consider backwards compatibility when appropriate
- Document architectural decisions and their rationales

## Databases
- Optimize database queries for performance
- Consider appropriate indexing strategies and other ways to improve performance

## Tests
- Follow Arrange-Act-Assert pattern
- Try to cover all code paths and edge cases
- Fix bugs discovered during test writing
- Test only public interfaces and functions
- Run tests to verify they pass

### Language-Specific Testing
#### Golang
- Use mockery framework for mocks
- Generate mocks with packages feature (run "mockery" command)
- Leverage table-driven tests when appropriate
- Use testify for assertions when needed

## Git
- Follow Conventional Commits specification for commit messages
- Structure: `type(scope): description` (e.g., `feat(api): add user authentication`)
- Common types: feat, fix, docs, style, refactor, test, chore

## Documentation
- Use mermaid for diagrams
- Do not write excessive documentation